                     _____  _                            _ 
                    |_   _|| |__   _ __  ___   __ _   __| |
                      | |  | '_ \ | '__|/ _ \ / _` | / _` |
                      | |  | | | || |  |  __/| (_| || (_| |
                      |_|  |_| |_||_|   \___| \__,_| \__,_|
                                                           
Un thread è un singolo flusso di istruzioni, all interno di un processo, che lo 
sheduler può eseguire separatamente e conocorrentemente con il resto del 
processo, per permettere il lavoro in parallelo di istruzioni ogni thread deve 
possedere delle strutture dati per realizzare un proprio flusso di controllo 
( Process ID, Program Counter, Stato dei registri, Stack, Segementi Codice, 
Dati, FD  etc .. ) 

In processo non può esserci soltanto uno stack poichè i flussi esecuzioni 
userebbero lo stesso ma non potendo sapere l' ordine di esecuzione delle 
istruzioni si intreccerebbero e non potrebbero funzionare correttamente, perciò
ogni thread possiede un proprio stack sul quale salvare i record di attivazione 
delle procedure chiamate all' interno del thread, ma essi condividono le stesse
risorse del processo ( Variabili Globali o tabella di File Descr. aperti) cosi 
come possono contenere delle proprie variabili locali. I registri di ogni thread
sono utilizzati per poter permetterre allo scheduler di poter stoppare il thread 
a piacimento salvare lo stato di esecuzione nei registri per poi poter 
riprendere senza nessuna perdita di dati. Ogni thread possiede una propria 
variabile errno nella quale viene salvato un eventuale codice di errore relativo
ad un operazione eseguita /usr/include/asm-generic/erno.h 

Vantaggi:
	Visibilità dei dati globali 
	Piu flussi di esecuzioni 
	Semplice gestione di eventi asincroni (I/O) 
	Comunicazioni più veloci tra thread 
	Context switch veloce, lo scheduler impiega pochissimo per cambiare thread 
Svantaggi:
	Concorrenza invece di parallelismo, occorre gestire la mutau esclusione 
	i casi in cui i thread provano ad accedere alla stessa variabile, ad esempio
	gestita con codice scritto correttamente ed alcune funzioni che ci 
	la mutua esclusione dette rientranti ( thread safe call ) 
        
			 ___                                 _                _ 
            / _ \  _ __    ___  _ __  __ _  ____(_)  ___   _ __  (_)
           | | | || '_ \  / _ \| '__|/ _` ||_  /| | / _ \ | '_ \ | |
           | |_| || |_) ||  __/| |  | (_| | / / | || (_) || | | || |
            \___/ | .__/  \___||_|   \__,_|/___||_| \___/ |_| |_||_|
                  |_|                                               
                  _    _                     _        _           
                 / \  | |_  ___   _ __ ___  (_)  ___ | |__    ___ 
                / _ \ | __|/ _ \ | '_ ` _ \ | | / __|| '_ \  / _ \
               / ___ \| |_| (_) || | | | | || || (__ | | | ||  __/
              /_/   \_\\__|\___/ |_| |_| |_||_| \___||_| |_| \___|
                                                                  


Un operazione che usa dati condivisi, si dice atomica se, rispetto alle 
operazioni che usano gli stessi dati condivisi, se viene eseguita in modo 
indivisibile, un operazione può diventare atomica nel caso in cui se un 
interrupt spezza la catena di esecuzione e alla fine dell'interruzione il thread
prova a fare ripartire l'operazione dall' inizio "sperando" che non venga 
bloccata ancora.E' importante però che la nuova operazione atomica venga 
eseguita e dia un risultato coerente ai dati iniziali che potrebbero essere 
stati cambiati nei tentativi di esecuzione precedenti. 

Le istruzioni assembly in generale NON sono atomiche, ma se l' ampiezza del bus 
dati è maggiore-uguale a quella del registro e a seconda del tipo di operazione 
assembly eseguita è atomica

Le istruzioni C NON sono atomiche, in poche parole non si pùo considerare 
atomica nessun tipo di operazione !! 

Le syscall sono funzioni in generale rientranti, fatta eccezione per alcune, 
sono costruite per essere utilizzate da più thread contemporaneamente.

Tutte le funzioni dello standard ANSI C e le funzioni degli standard POSIX.1 
sono thread safe, solitamente il nome delle funzioni rientranti termina in _r
                          _    _                            _ 
                   _ __  | |_ | |__   _ __  ___   __ _   __| |
                  | '_ \ | __|| '_ \ | '__|/ _ \ / _` | / _` |
                  | |_) || |_ | | | || |  |  __/| (_| || (_| |
                  | .__/  \__||_| |_||_|   \___| \__,_| \__,_|
                  |_|                                         

Thread standardizzati IEEE POSIX 1003.1c noti anche come pthread
Le API si di dividono in:
	Thread management: funzioni per creare, eliminare, attendere i pthread
	
	Mutexes: funzioni per supportare un tipo di sincronizzazione "mutex", 
			che utilizzano strutture dati che 	permettono di accedere ad una 
			locazione di memoria sapendo che nessun altro ci accederà
	
	Condition Variables: funzioni a suppporto di sincronizzazioni più raffinate
			rispetto la mutex con strutture dati che fanno aspettare quel thread
			fino a quando non sono verificate certe condizione che consentiranno
			a quel thread di proseguire 

Il file pthread.h contiene le definizioni dei pthread, iniziano con pthread_
                                  _     ____  ___ 
                                 / \   |  _ \|_ _|
                                / _ \  | |_) || | 
                               / ___ \ |  __/ | | 
                              /_/   \_\|_|   |___|
                                                  

